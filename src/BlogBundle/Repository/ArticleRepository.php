<?php

namespace BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{

  public function getArticleTeam()
  {
    /* On récupère les articles avec les images en les triant par catégories, on sélectionne uniquement ceux
    qui viennent du blog de l'Equipe, on trie par ordre descendant et on retourne le tout */
    return $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                  ->addSelect('i')
                ->where('a.categorie = :categorie')
                  ->setParameter('categorie', 'TEAM')
                ->orderBy('a.datePublication', 'DESC')
                ->getQuery()
                ->getResult();
  }

  public function getArticleMembre()
  {
    /* On récupère les articles avec les images en les triant par catégories, on sélectionne uniquement ceux
    qui viennent du blog des Membres, on trie par ordre descendant et on retourne le tout */
    return $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                  ->addSelect('i')
                ->where('a.categorie = :categorie')
                  ->setParameter('categorie', 'MEMBRE')
                ->orderBy('a.datePublication', 'DESC')
                ->getQuery()
                ->getResult();
  }

  public function getArticleKrma()
  {
    /* On récupère les articles avec les images en les triant par catégories, on sélectionne uniquement ceux
    qui viennent du blog de Krma, on trie par ordre descendant et on retourne le tout */
    return $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                  ->addSelect('i')
                ->where('a.categorie = :categorie')
                  ->setParameter('categorie', 'KRMA')
                ->getQuery()
                ->getResult();
  }

  public function getArticle($page, $nbPerPpage)
  {
    /* On joint les images à chaque article et on trie le tout par ordre descendant */
    $query = $this->createQueryBuilder('a')
                  ->leftJoin('a.image', 'i')
                    ->addSelect('i')
                  ->orderBy('a.datePublication', 'DESC')
                  ->getQuery();

    /* On définit la pagination, on commence par l'article d'où partira la pagination,
    puis on définit le nombre maximum d'article par page */
    $query
      ->setFirstResult(($page-1) * $nbPerPpage)
      ->setMaxResults($nbPerPpage);

    return new Paginator($query, true);
  }

  public function getArticleAll()
  {
    /* On joint les images à chaque article et on trie le tout par order descendant, on récupère le tout
    via $query */
    return $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                  ->addSelect('i')
                  ->getQuery()
                  ->getResult();
  }

  public function removeArticle($id)
  {
    /* On sélectionne l'article selon ID, on y joint les images afin de ne pas laisser d'image
    sans article puis on supprime l'article */
    return $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                  ->addSelect('i')
                ->where('a.id = :id')
                  ->setParameter('id', $id)
                ->delete()
                ->getQuery()
                ->getResult();
  }

  public function getUpdateArticle($id)
  {
    return $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                  ->addSelect('i')
                ->where('a.id = :id')
                  ->setParameter('id', $id)
                ->getQuery()
                ->getResult();
  }
}
